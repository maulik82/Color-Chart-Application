
 // test1.cpp
 // TDD

 // Created by  Maulik Patel on 22/07/2020.
 // Copyright Â© 2020 Maulik Patel. All rights reserved.



#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include <iostream>
#include <cstdlib>
#include "../lib.h"
#include "../Matrix.h"
#include "../Display.h"

TEST_CASE(" FIRST GIVEN TEST "){
    Matrix m2{"RAMP TEST"};
    m2.setCornerValues(0, 2, 0, 2);
    m2.performBilinearInterpolation();

	array2d_u16 out {{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002, }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }, 
		{ 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0001, 0001, 0001, 0001, 0001, 0001, 0002 }};


   REQUIRE( out == m2.m_data);
}

TEST_CASE(" SECOND GIVEN TEST "){
    Matrix m2{"RAMP TEST"};
    m2.setCornerValues(65, 255, 65, 255);
    m2.performBilinearInterpolation();

	array2d_u16 out {{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF },
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }, 
	{ 0x0041, 0x004D, 0x005A, 0x0067, 0x0073, 0x0080, 0x008D, 0x0099, 0x00A6, 0x00B3, 0x00BF, 0x00CC, 0x00D9, 0x00E5, 0x00F2, 0x00FF }}; 

   REQUIRE( out == m2.m_data);
}

TEST_CASE(" THIRD GIVEN TEST "){
    Matrix m2{"RAMP TEST"};
    m2.setCornerValues(200, 0, 30, 0 );
    m2.performBilinearInterpolation();

	array2d_u16 out {{0x00C8, 0x00BA, 0x00AD, 0x00A0, 0x0092, 0x0085, 0x0078, 0x006A, 0x005D, 0x0050, 0x0042, 0x0035, 0x0028, 0x001A, 0x000D, 0x0000 },
	{0x00B2, 0x00A6, 0x009A, 0x008F, 0x0082, 0x0076, 0x006B, 0x005E, 0x0053, 0x0047, 0x003B, 0x002F, 0x0023, 0x0017, 0x000B, 0x0000 },
	{0x009D, 0x0092, 0x0088, 0x007E, 0x0073, 0x0068, 0x005E, 0x0053, 0x0049, 0x003F, 0x0034, 0x0029, 0x001F, 0x0014, 0x000A, 0x0000 },
	{0x0088, 0x007E, 0x0075, 0x006D, 0x0063, 0x005A, 0x0051, 0x0048, 0x003F, 0x0036, 0x002D, 0x0024, 0x001B, 0x0011, 0x0008, 0x0000 },
	{0x0073, 0x006B, 0x0063, 0x005C, 0x0054, 0x004C, 0x0045, 0x003D, 0x0035, 0x002E, 0x0026, 0x001E, 0x0017, 0x000F, 0x0007, 0x0000 },
	{0x005D, 0x0057, 0x0051, 0x004B, 0x0044, 0x003E, 0x0038, 0x0031, 0x002B, 0x0025, 0x001F, 0x0018, 0x0012, 0x000C, 0x0006, 0x0000 },
	{0x0048, 0x0043, 0x003E, 0x003A, 0x0035, 0x0030, 0x002B, 0x0026, 0x0021, 0x001D, 0x0018, 0x0013, 0x000E, 0x0009, 0x0004, 0x0000 },
	{0x0033, 0x002F, 0x002C, 0x0029, 0x0025, 0x0022, 0x001E, 0x001B, 0x0017, 0x0014, 0x0011, 0x000D, 0x000A, 0x0006, 0x0003, 0x0000 },
	{0x001E, 0x001C, 0x001A, 0x0018, 0x0016, 0x0014, 0x0012, 0x0010, 0x000E, 0x000C, 0x000A, 0x0008, 0x0006, 0x0004, 0x0002, 0x0000 }};

   REQUIRE( out == m2.m_data);
}

TEST_CASE(" FOURTH GIVEN TEST "){
    Matrix m2{"RAMP TEST"};
    m2.setCornerValues(0, 0, 3200, 1800 );
    m2.performBilinearInterpolation();

	array2d_u16 out {{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0190, 0x0184, 0x0178, 0x016D, 0x0161, 0x0155, 0x014A, 0x013E, 0x0132, 0x0127, 0x011B, 0x010F, 0x0104, 0x00F8, 0x00EC, 0x00E1 },
	{ 0x0320, 0x0308, 0x02F1, 0x02DA, 0x02C2, 0x02AB, 0x0294, 0x027C, 0x0265, 0x024E, 0x0236, 0x021F, 0x0208, 0x01F0, 0x01D9, 0x01C2 },
	{ 0x04B0, 0x048C, 0x0469, 0x0447, 0x0423, 0x0400, 0x03DE, 0x03BA, 0x0397, 0x0375, 0x0351, 0x032E, 0x030C, 0x02E8, 0x02C5, 0x02A3 },
	{ 0x0640, 0x0611, 0x05E2, 0x05B4, 0x0585, 0x0556, 0x0528, 0x04F9, 0x04CA, 0x049C, 0x046D, 0x043E, 0x0410, 0x03E1, 0x03B2, 0x0384 },
	{ 0x07D0, 0x0795, 0x075B, 0x0721, 0x06E6, 0x06AC, 0x0672, 0x0637, 0x05FD, 0x05C3, 0x0588, 0x054E, 0x0514, 0x04D9, 0x049F, 0x0465 },
	{ 0x0960, 0x0919, 0x08D3, 0x088E, 0x0847, 0x0801, 0x07BC, 0x0775, 0x072F, 0x06EA, 0x06A3, 0x065D, 0x0618, 0x05D1, 0x058B, 0x0546 },
	{ 0x0AF0, 0x0A9D, 0x0A4C, 0x09FB, 0x09A8, 0x0957, 0x0906, 0x08B3, 0x0862, 0x0811, 0x07BE, 0x076D, 0x071C, 0x06C9, 0x0678, 0x0627 },
	{ 0x0C80, 0x0C22, 0x0BC5, 0x0B68, 0x0B0A, 0x0AAD, 0x0A50, 0x09F2, 0x0995, 0x0938, 0x08DA, 0x087D, 0x0820, 0x07C2, 0x0765, 0x0708 }};

   REQUIRE( out == m2.m_data);
}




